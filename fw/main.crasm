CPU 6502
OUTPUT HEX

; Vectors
NMI_VECT equ 0xFFFA
IRQ_VECT equ 0xFFFE
RST_VECT equ 0xFFFC

; Memory
ROM_BEGIN equ 0xF800
ROM_END   equ 0xFFFF
RAM_BEGIN equ 0x0000
RAM_END   equ 0x0800

; I/O
EXT1_BASE equ 0x2000
EXT2_BASE equ 0x4000
EXT3_BASE equ 0x6000
SCRN_BASE equ 0x8000
KEYB_BASE equ 0xA000
NMI_CLR   equ 0xC000

; Key codes
KEY_INC  equ 16
KEY_DEC  equ 17
KEY_SEL  equ 18
KEY_GO   equ 19
KEY_F1   equ 20
KEY_F2   equ 21
KEY_F3   equ 22
KEY_F4   equ 23
KEY_NONE equ 24

; Screen
SCRN_DOT   equ 0x10
SCRN_BLANK equ 0x20

; Time base
NMI_HZ       equ 1024
KEYB_COOLDWN equ 50


DUMMY

; Zero page variables
* = RAM_BEGIN + 0xE0

; Accessed by NMI
init_done       ds 1 ; 0 - init done, others - NMI shouldn't do it's tasks

screen          ds 8
scrnptr         ds 1

keycode         ds 1

jiffies         ds 2 ; Only for NMI use - non-atomic access
time_s          ds 1

; Not accessed by NMI

temp            ds 6
get_key_temp    ds 1
sleep_temp0     ds 1
sleep_temp1     ds 1

address         ds 2
mode_sel        ds 1

irq_ptr         ds 2
irq_valid       ds 1


CODE

* = ROM_BEGIN

; BIOS function table
dw reset          ; void reset(void)
dw irq_register   ; void irq_register(irq_addr (X, Y))

dw get_screen_ptr ; screen_ptr (X, Y) get_screen_ptr(void)
dw putch          ; void putch(character (A), position (X))
dw putbyte        ; void putch(byte (A), position (X))
dw dot_enable     ; void dot_enable(position (X))
dw dot_disable    ; void dot_disable(position (X))
dw clear_screen   ; void clear_screen(void)
dw printx_u16     ; void printx_u16(number (X, Y))
dw printd_u16     ; void printd_u16(number (X, Y))
dw printd_s16     ; void printd_s16(number (X, Y))

dw get_key        ; key_code (A) get_key(void)
dw get_key_nb     ; key_code (A) get_key_nb(void)

dw get_jiffies    ; jffies (A) get_jiffies(void)
dw get_seconds    ; seconds (A) get_seconds(void)
dw msleep         ; void msleep(time (A))
dw sleep          ; void sleep(time (A))


; "Business" code, handling user inputs, monitor functionality

; Function printd_u16
; Display unsigned 16-bit decimal digit on the screen
; Input: stack - number. Output: none.
; Destroys:
printd_u16      LDA #0
                STA temp
                STA temp + 1
                STA temp + 2
                STY temp + 3
                STX temp + 4
                LDX #16
printd_u16_l0   CLC                     ; loop 1 - shift 16 times
printd_u16_l1   LDY #4                  ; loop 2 - shift all once
                LDA temp, Y
                ROL
                STA temp, Y
                DEY
                BPL printd_u16_l1

                LDA temp + 2
                AND #0x0F
                CMP #0x05
                BMI printd_u16_0
                LDA temp + 2
                CLC
                ADC #0x03
                STA temp + 2
                LDA temp + 1
                ADC #0
                STA temp + 1
                LDA temp
                ADC #0
                STA temp

printd_u16_0    LDA temp + 2
                AND #0xF0
                CMP #0x50
                BMI printd_u16_1
                LDA temp + 2
                CLC
                ADC #0x30
                STA temp + 2
                LDA temp + 1
                ADC #0
                STA temp + 1
                LDA temp
                ADC #0
                STA temp

printd_u16_1    LDA temp + 1
                AND #0x0F
                CMP #0x05
                BMI printd_u16_2
                LDA temp + 1
                CLC
                ADC #0x03
                STA temp + 1
                LDA temp
                ADC #0
                STA temp

printd_u16_2    LDA temp + 1
                AND #0xF0
                CMP #0x50
                BMI printd_u16_3
                LDA temp + 1
                CLC
                ADC #0x30
                STA temp + 1
                LDA temp
                ADC #0
                STA temp

printd_u16_3    LDA temp
                AND #0x0F
                CMP #0x05
                BMI printd_u16_4
                LDA temp
                CLC
                ADC #0x03
                STA temp

printd_u16_4    DEX
                BPL printd_u16_l0

                LDX #3

                LDA temp
                LSR
                LSR
                LSR
                LSR
                JSR putch

                LDA temp
                AND #0x0F
                INX
                JSR putch

                LDA temp + 1
                LSR
                LSR
                LSR
                LSR
                INX
                JSR putch

                LDA temp + 1
                AND #0x0F
                INX
                JSR putch

                LDA temp
                LSR
                LSR
                LSR
                LSR
                INX
                JSR putch

                LDA temp + 2
                AND #0x0F
                INX
                JSR putch

                LDX #3

                LDA temp
                BNE printd_u16_5
                STA screen, X

printd_u16_5    INX
                LDA temp + 1
                AND #0xF0
                BNE printd_u16_6
                STA screen, X

printd_u16_6    INX
                LDA temp + 1
                AND #0x0F
                BNE printd_u16_7
                STA screen, X

printd_u16_7    INX
                LDA temp
                AND #0xF0
                BNE printd_u16_8
                STA screen, X

printd_u16_8    RTS


; Function printd_s16
; Display signed 16-bit decimal digit on the screen
; Input: X, Y - number. Output: none.
; Destroys:
printd_s16      LDA #0
                STA temp + 5
                TYA
                BMI printd_s16_neg
                JSR printd_u16
                RTS
printd_s16_neg  STY temp + 3
                STX temp + 4
                CLC
                LDA #0xFF
                EOR temp + 4
                ADC #1
                STA temp + 4
                LDA #0xFF
                EOR temp + 3
                ADC #0
                TAY
                LDX temp + 4
                JSR printd_u16
                LDX #6
printd_s16_0    LDA screen, X
                CMP #0
                BEQ printd_s16_1
                DEX
                TXA
                CMP #2
                BEQ printd_s16_1
printd_s16_1    LDA #0x40 ; -
                STA screen, X
                RTS


; Function printx_u16
; Display unsigned 16-bit hexadecimal digit on the screen
; Input: X, Y - number. Output: none.
; Destroys: A, X, Y.
printx_u16      TXA
                PHA
                LDX #4
                TYA
                JSR putbyte
                PLA
                JSR putbyte
                RTS


; Function clear_screen
; Clears screen (blank display)
; Input: none. Output: none.
; Destroys: A, X.
clear_screen    LDA #0
                LDX #7
clear_screen_l  STA screen, X
                DEX
                BPL clear_screen_l
                RTS


; Function get_screen_ptr
; Returns a pointer to screen frame buffer
; Input: none. Output: X, Y - screen pointer
; Destroys: A.
get_screen_ptr  LDY #screen >> 8
                LDX #screen & 0xFF
                RTS


; Function msleep
; Sleep for 0-255 ms
; Input: A - sleep time in ~1ms. Output: none.
; Destroys: A, sleep_temp0, sleep_temp1.
msleep          STA sleep_temp0
                LDA jiffies
                STA sleep_temp1
msleep_loop     LDA jiffies
                SEC
                SBC sleep_temp1
                CMP sleep_temp0
                BMI msleep_loop
                RTS


; Function sleep
; Sleep for 0-255 s
; Input: A - sleep time in 1s. Output: none.
; Destroys: A, sleep_temp0, sleep_temp1.
sleep           STA sleep_temp0
                LDA time_s
                STA sleep_temp1
sleep_loop      LDA time_s
                SEC
                SBC sleep_temp1
                CMP sleep_temp0
                BMI sleep_loop
                RTS


; Function get_jiffies
; Fetches 8-bit ~1ms period timer
; Input: none. Output: A - jiffies.
; Destroys: A.
get_jiffies     LDA jiffies
                RTS


; Function get_seconds
; Fetches 8-bit 1s period timer
; Input: none. Output: A - seconds.
; Destroys: A.
get_seconds     LDA time_s
                RTS


; Function irq_register
; Registers user IRQ handler
; Input: X, Y - irq handler pointer. Output: none.
; Destroys: A.
irq_register    LDA #0
                STA irq_valid
                STX irq_ptr
                STY irq_ptr + 1
                LDA #1
                STA irq_valid
                RTS


lut_7seg        db 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 ; Dot disabled
                db 0xBF, 0x86, 0xDB, 0xCF, 0xE6, 0xED, 0xFD, 0x87, 0xFF, 0xEF, 0xF7, 0xFC, 0xB9, 0xDE, 0xF9, 0xF1 ; Dot enabled
                db 0x00                                                                                           ; Digit disabled


; Function putch
; Updates one char on the screen.
; Input: A - char, X - position. Output: screen.
; Destroys: Y.
putch           PHA
                AND #0x3F
                TAY
                LDA lut_7seg, Y
                STA screen, X
                PLA
                RTS


; Function putbyte
; Updates byte char on the screen.
; Input: A - byte, X - position. Output: screen.
; Destroys: X - incremented to the next screen location.
putbyte         PHA
                LSR A
                LSR A
                LSR A
                LSR A
                JSR putch
                INX
                PLA
                AND #0x0F
                JSR putch
                INX
                RTS


; Function dot_enable
; Turns a dot on on position X on the screen.
; Input: X - position. Output: screen.
; Destroys: A.
dot_enable      LDA #0x80
                ORA screen, X
                STA screen, X
                RTS


; Function dot_disable
; Turns a dot off on position X on the screen.
; Input: X - position. Output: screen.
; Destroys: A.
dot_disable     LDA #0x7F
                AND screen, X
                STA screen, X
                RTS


; Function draw_screen
; Updates screen - current address and memory value.
; Input: address, mode_sel. Output: screen.
; Destroys: A, X, Y.
draw_screen     LDX #0

                LDA address + 1
                JSR putbyte

                LDA address
                JSR putbyte

                LDA #0
                STA screen, X
                INX
                STA screen, X
                INX

                LDY #0
                LDA (address), Y
                JSR putbyte

                LDX #7
                LDA mode_sel
                BEQ draw_screen_e
                LDX #3

draw_screen_e   JMP dot_enable


; Function get_key_nb
; Get key code (non blocking)
; Input: none. Output: A - key code.
; Destroys: A
get_key_nb      LDA keycode
                RTS


; Function get_key
; Blocks until a key is pressed
; Input: none. Output: A - key code.
; Destroys: A, keyb_start
get_key         LDA keycode
                CMP #KEY_NONE
                BNE get_key             ; Wait for none key pressed
                LDA jiffies
                STA get_key_temp        ; Begin cooldown period
get_key_cooldwn LDA keycode
                CMP #KEY_NONE
                BNE get_key             ; Check if still not pressed
                LDA jiffies
                SEC
                SBC get_key_temp
                CMP #KEYB_COOLDWN
                BPL get_key_cooldwn     ; Wait for KEYB_COOLDWN jiffies
get_key_press   LDA keycode
                CMP #KEY_NONE
                BEQ get_key_press       ; Wait for key press
                RTS


; Function reset
; Entry point.
reset           LDA #0xff
                STA init_done
                CLI
                CLD

                ; Setup stack
                LDX #0xff
                TXS

                ; Init variables
                LDA #KEY_NONE
                STA keycode

                ; Clear screen
                LDA #SCRN_BLANK
                LDX #7
reset0          STA screen, X
                DEX
                BPL reset0

                ; Keycode
                LDA #KEY_NONE
                STA keycode

                ; Jiffies, timers
                LDA #0
                STA jiffies
                STA jiffies + 1
                STA time_s

                ; IRQ handling
                STA irq_ptr
                STA irq_ptr + 1
                STA irq_valid

                ; Address
                STA address
                LDA #0x02
                STA address + 1

                ; Init done!
                LDA #0
                STA init_done
                SEI

main_loop       JSR draw_screen

                JSR get_key

                CMP #16
                BPL main_inc

                ; 0-F key pressed - edit one digit
                PHA
                LDA mode_sel
                CMP #0
                BEQ main_edit_b

                ; Edit address
                CLC
                ROL address
                ROL address + 1
                CLC
                ROL address
                ROL address + 1
                CLC
                ROL address
                ROL address + 1
                CLC
                ROL address
                ROL address + 1
                PLA
                ORA address
                STA address
                JMP main_loop

main_edit_b     LDY #0
                LDA (address), Y
                ASL A
                ASL A
                ASL A
                ASL A
                STA temp
                PLA
                ORA temp
                STA (address), Y
                JMP main_loop

main_inc        CMP #KEY_INC
                BNE main_dec

                ; INC key pressed - increment address
                INC address
                BNE main_loop
                INC address + 1
                JMP main_loop

main_dec        CMP #KEY_DEC
                BNE main_sel

                ; DEC key pressed - decrement address
                LDA address
                SEC
                SBC #1
                STA address
                BCS main_loop
                DEC address + 1
                JMP main_loop

main_sel        CMP #KEY_SEL
                BNE main_go

                ; SEL key pressed - change edit mode
                LDA #1
                EOR mode_sel
                STA mode_sel
                JMP main_loop

main_go         CMP #KEY_GO
                BNE main_loop ; Ignore function keys

                ; GO key pressed - execute user program
                ; Prepare return address
                LDA #reset >> 8
                PHA
                LDA #reset & 0xFF
                PHA

                JMP (address)


; System functions

; Function irq
; Handles IRQ
; Input: None. Output: None.
; Destroys: None
irq             PHA

                ; Exit if IRQ is not enabled by a user SW
                LDA irq_valid
                BEQ irq_ret

                TYA
                PHA
                TXA
                PHA

                ; There's no indirect JSR we need - do it hard way
                ; Prepare return address on stack to allow RTS
                LDA #irq_end >> 8
                PHA
                LDA #irq_end & 0xFF
                PHA

                ; Jump to address pointed by irq_ptr
                JMP (irq_ptr)

irq_end         PLA
                TAX
                PLA
                TAY
irq_ret         PLA
                RTI


; Function nmi
; Handles NMI - jiffies, keyboard, screen.
; Input: None. Output: None.
; Destroys: None
nmi             PHA
                TYA
                PHA
                TXA
                PHA

                ; Early exit if init is not complete
                ; We cannot disable NMI, so this is needed
                LDA init_done
                BNE nmi_end

                ; Increment jiffies
                JSR handle_timer

                ; Handle UI
                JSR refresh_screen
                JSR scan_keyb

                ; Clear NMI to allow a next one to occur
                ; Dummy write to preset 74HC74 flip-flop
                STA NMI_CLR

nmi_end         PLA
                TAX
                PLA
                TAY
                PLA
                RTI


; Function handle_timer
; Time keeping. Assumption - called every NMI
; Input: jiffies var. Output: jiffies, time_s vars.
; Destroys: A, X.
handle_timer    INC jiffies
                BNE handle_timer_1
                LDX jiffies + 1
                INX
                TXA
                CMP #NMI_HZ / 256
                BMI handle_timer_0
                INC time_s
                LDA #0
handle_timer_0  STA jiffies + 1
handle_timer_1  RTS


lut_ptr2bit     db 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80


; Function refresh_screen
; Displays next digit on multiplexed 7 segment display
; Input: screen, scrnptr vars. Output: scrnptr.
; Destroys: A, X, Y.
refresh_screen  LDX scrnptr
                INX                     ; Increment current digit
                TXA
                CMP #8
                BMI refresh_screen0     ; Screen wrap-around?
                LDA #0
refresh_screen0 TAX
                STA scrnptr
                LDA screen, X           ; Fetch from frame buffer
                LDY lut_ptr2bit, X      ; Get digit address offset
                STA SCRN_BASE, Y        ; Display digit
                RTS


lut_keyb_scan_0  db 0x3E, 0x3D, 0x3B, 0x37, 0x2F, 0x1F
lut_keyb_scan_1  db KEY_F1, 0xC, 0x8, 0x4, 0x0, KEY_INC


; Function scan_keyboard
; Scans whole keyboard, stores key code in keycode var
; Input: None. Output: None.
; Destroys: A, X, Y.
scan_keyb       LDX #5                  ; loop counter
scan_keyb_row_l LDY lut_keyb_scan_0, X  ; row address offset
                LDA KEYB_BASE, Y        ; get row data
                CMP #0xFF               ; is a key pressed on the row?
                BNE scan_keyb_row_f
                DEX
                BPL scan_keyb_row_l     ; are we done?
                LDY #KEY_NONE           ; no key pressed
                BNE scan_keyb_end
scan_keyb_row_f LDY lut_keyb_scan_1, X  ; base key of a row
                CLC                     ; To avoid endless loop, just in case
scan_keyb_col_l ROR A                   ; get next bit into carry
                BCC scan_keyb_end       ; have we found collumn?
                INY                     ; select next key in a row
                BCS scan_keyb_col_l     ; branch always
scan_keyb_end   STY keycode
                RTS


; Vectors

* = RST_VECT
dw reset

* = NMI_VECT
dw nmi

* = IRQ_VECT
dw irq
